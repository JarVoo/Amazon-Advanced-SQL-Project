


SELECT * FROM shippings
WHERE return_date IS NOT NULL

SELECT * FROM payments
WHERE order_id = 6747

-----------------------------------------------------------------------------------------------------
-- Business Problems - Advanced Analysis
-----------------------------------------------------------------------------------------------------

/*
1. Top Selling Products
Query the top 10 products by total sales value.
Challenge: Include product name, total quantity sold, and total sales value.
*/

-- Join orders, order_items, products tables
-- find the total sales
-- group by product id
-- top 10 products

ALTER TABLE order_items
ADD COLUMN total_sales FLOAT;

-- update quantity * units

SELECT * FROM category;

UPDATE order_items
SET total_sales = quantity * price_per_unit;
SELECT * FROM order_items
WHERE quantity > 1;

SELECT 
	p.product_id,
	p.product_name,
	ROUND(CAST(SUM(total_sales) AS numeric),2) AS total_sales,
	COUNT(o.order_id) AS total_orders
FROM orders AS o
INNER JOIN order_items AS oi
ON o.order_id = oi.order_id
INNER JOIN products AS p
ON oi.product_id = p.product_id
GROUP BY 1,2
ORDER BY total_sales DESC
LIMIT 10;

/*
2. Revenue by Category
Calculate total revenue generated by each product category.
Challenge: Include the percentage contribution of each category to total revenue.
*/

-- category_id , category_name, total_sales


SELECT 
	p.category_id,
	c.category_name,
	ROUND(CAST(SUM(oi.total_sales) AS numeric),2) AS total_sale,
	ROUND(CAST(SUM(oi.total_sales)/(SELECT SUM(total_sales) FROM order_items)*100 AS numeric),2) AS perc_contribution
FROM order_items AS oi
INNER JOIN products AS p
ON oi.product_id = p.product_id
INNER JOIN category AS c
ON p.category_id = c.category_id
GROUP BY 1,2
ORDER BY 3 DESC

/*
3. Average Order Value (AOV)
Compute the average order value for each customer.
Challenge: Include only customers with more than 5 orders.
*/

-- orders join to order_items joined to customers table

SELECT * FROM orders

SELECT 
	c.customer_id,
	 CONCAT(LEFT(c.first_name, 1), '. ', c.last_name) AS customer_initial_lastname,
	ROUND(CAST(SUM(oi.total_sales)/COUNT(o.order_id) AS numeric),2) AS average_order_value,
	COUNT(o.order_id) AS total_orders
FROM orders AS o
LEFT JOIN order_items AS oi
ON o.order_id = oi.order_id
LEFT JOIN customers AS c
ON c.customer_id = o.customer_id
GROUP BY 1,2
HAVING COUNT(o.order_id) > 5
ORDER BY 4 DESC

/*
4. Monthly Sales Trend
Query monthly total sales over the past year.
Challenge: Display the sales trend, grouping by month, return current_month sale, last month sale!
*/

-- last 1 year of data
-- each month, their sale and prev month sale
-- window lag

SELECT DISTINCT EXTRACT(YEAR FROM order_date)
FROM orders


SELECT
	year,
	month,
	total_sales AS current_month_sale,
	LAG(total_sales, 1) OVER(ORDER BY year, month) AS last_month_sale
FROM
(
SELECT 
	EXTRACT(MONTH from order_date) AS month,
	EXTRACT(YEAR from order_date) AS year,
	ROUND(SUM(oi.total_sales::numeric),2) AS total_sales
FROM orders  as o
INNER JOIN order_items AS oi
USING(order_id)
WHERE order_date >= CURRENT_DATE - INTERVAL '1 year'
GROUP BY 1,2
ORDER BY 2,1) AS t1


/*
5. Customers with No Purchases
Find customers who have registered but never placed an order.
Challenge: List customer details and the time since their registration.
*/

SELECT *
FROM customers AS c
LEFT JOIN orders AS o
ON c.customer_id = o.customer_id
WHERE order_id IS NULL



/*
6. Least-Selling Categories by State
Identify the least-selling product category for each state.
Challenge: Include the total sales for that category within each state.
*/

SELECT * FROM orders

SELECT
	state,
	category,
	total_sale
FROM(
SELECT 
	cu.state AS state,
	c.category_name AS category,
	ROUND(SUM(oi.total_sales::numeric),2) AS total_sale,
	RANK() OVER(PARTITION BY cu.state ORDER BY SUM(oi.total_sales) ASC) AS rank
FROM orders AS o
JOIN order_items AS oi
ON o.order_id = oi.order_id
JOIN products AS p
ON p.product_id = oi.product_id
JOIN category AS c
ON p.category_id = c.category_id
JOIN customers AS cu
ON o.customer_id = cu.customer_id
GROUP BY 1,2
-- ORDER BY 1,3
) AS t2
WHERE rank = 1;



/*
7. Customer Lifetime Value (CLTV)
Calculate the total value of orders placed by each customer over their lifetime.
Challenge: Rank customers based on their CLTV.
*/

-- customer x orders x order_items
-- group by customer_id
-- sum(total_sales)
-- rank of customers


SELECT 
	c.customer_id,
	ROUND(SUM(oi.total_sales::numeric),2) AS CLTV,
	DENSE_RANK() OVER(ORDER BY SUM(oi.total_sales) DESC) AS rank
FROM orders AS o
JOIN order_items AS oi
ON o.order_id = oi.order_id
JOIN customers AS c
ON c.customer_id = o.customer_id
GROUP BY 1


/*
8. Inventory Stock Alerts
Query products with stock levels below a certain threshold (e.g., less than 10 units).
Challenge: Include last restock date and warehouse information.
*/

-- products x inventory tables
-- stock < 10

SELECT 
	i.inventory_id,
	p.product_name,
	i.stock,
	i.last_stock_date,
	i.warehouse_id
FROM products AS p
LEFT JOIN inventory AS i
ON p.product_id = i.product_id
WHERE i.stock < 10

/*
9. Shipping Delays
Identify orders where the shipping date is later than 3 days after the order date.
Challenge: Include customer, order details, and delivery provider.
*/

-- customer x orders x shipping
SELECT * FROM customers


SELECT 
	 CONCAT(LEFT(first_name, 1), '. ', last_name) AS customer_name,
	 o.order_id,
	 s.shipping_providers,
	 (s.shipping_date - o.order_date) AS delivery_time
FROM orders AS o
JOIN customers AS c
ON o.customer_id = c.customer_id
JOIN shippings AS s
ON o.order_id = s.order_id
WHERE s.shipping_date - o.order_date > 3


/*
10. Payment Success Rate 
Calculate the percentage of successful payments across all orders.
Challenge: Include breakdowns by payment status (e.g., failed, pending).
*/


-- payments x orders

SELECT 
	payment_status,
	COUNT(*) AS total_count,
	COUNT(*)::numeric/(SELECT COUNT(*) FROM orders)::numeric *100 AS total_orders
FROM payments AS p
JOIN orders AS o
ON p.order_id = o.order_id
GROUP BY 1


/*
11. Top Performing Sellers
Find the top 5 sellers based on total sales value.
Challenge: Include both successful and failed orders, and display their percentage of successful orders.
*/

-- oi x o x seller

WITH top_sellers AS (
SELECT 
	s.seller_id,
	s.seller_name,
	ROUND(SUM(oi.total_sales::numeric),2) AS total_sale
	-- COUNT(o.order_id)::numeric/(SELECT COUNT(*) FROM orders)::numeric * 100 AS perc
FROM orders AS o
JOIN order_items AS oi
ON o.order_id = oi.order_id
JOIN sellers AS s
ON s.seller_id = o.seller_id
GROUP BY 1,2
ORDER BY 3 DESC
LIMIT 5
),
seller_reports AS (
SELECT 
	ts.seller_id,
	ts.seller_name,
	o.order_status,
	COUNT(*) AS total_orders
FROM orders AS o
JOIN top_sellers AS ts
ON o.seller_id = ts.seller_id
WHERE o.order_status NOT IN ('Inprogress', 'Returned')
GROUP BY 1,2,3
)

SELECT 
	seller_id,
	seller_name,
	SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE NULL END) AS completed_orders,
	SUM(CASE WHEN order_status = 'Cancelled' THEN total_orders ELSE NULL END) AS failed_orders,
	SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE NULL END)/SUM(total_orders)*100 AS perc_succ_orders
FROM seller_reports
GROUP BY 1,2
ORDER BY 5 DESC


/*
12. Product Profit Margin
Calculate the profit margin for each product (difference between price and cost of goods sold).
Challenge: Rank products by their profit margin, showing highest to lowest.
*/

-- o x oi x p
-- SUM(total sales - cogs x quantity)

SELECT 
	p.product_name,
	ROUND(SUM(oi.total_sales - (p.cogs * oi.quantity))::numeric,2) AS profit,
	ROUND((SUM(oi.total_sales - (p.cogs * oi.quantity))/SUM(total_sales))::numeric,2)*100 AS profit_margin,
	DENSE_RANK() OVER(ORDER BY SUM(oi.total_sales - (p.cogs * oi.quantity))/SUM(total_sales)*100 DESC) AS product_rank
FROM order_items AS oi
JOIN products AS p
ON oi.product_id = p.product_id
GROUP BY 1


/*
13. Most Returned Products
Query the top 10 products by the number of returns.
Challenge: Display the return rate as a percentage of total units sold for each product.
*/
-- o x oi x p

SELECT DISTINCT order_status FROM orders


SELECT 
	p.product_id,
	p.product_name,
	COUNT(*) AS total_unit_sold,
	COUNT(CASE WHEN o.order_status = 'Returned' THEN oi.order_id ELSE NULL END) AS returned_items,
	ROUND(COUNT(CASE WHEN o.order_status = 'Returned' THEN oi.order_id ELSE NULL END)/COUNT(*)::numeric,2)*100 AS return_rate
FROM order_items AS oi
JOIN products AS p
ON p.product_id = oi.product_id
JOIN orders AS o
ON o.order_id = oi.order_id
GROUP BY 1,2
HAVING COUNT(CASE WHEN o.order_status = 'Returned' THEN oi.order_id ELSE NULL END) > 5
ORDER BY 5 DESC

/*
14. Orders Pending Shipment
Find orders that have been paid but are still pending shipment.
Challenge: Include order details, payment date, and customer information.
*/

--customers x orders x shipping x payments

SELECT DISTINCT payment_status FROM payments
SELECT DISTINCT delivery_status FROM shippings

SELECT
	o.*,
	p.payment_date,
	c.*,
	p.payment_status,
	s.delivery_status
FROM orders AS o
JOIN shippings AS s
ON o.order_id = s.order_id
JOIN payments AS p
ON o.order_id = p.order_id
JOIN customers AS c
ON c.customer_id = o.customer_id
WHERE p.payment_status = 'Payment Successed' AND s.delivery_status = 'Shipped'

/*
15. Inactive Sellers
Identify sellers who havenâ€™t made any sales in the last 6 months.
Challenge: Show the last sale date and total sales from those sellers.
*/


-- sellers x orders x order_items
WITH cte1 AS 
(
SELECT * FROM sellers
WHERE seller_id NOT IN (SELECT seller_id FROM orders WHERE order_date >= CURRENT_DATE - INTERVAL '6 month')
)
SELECT *
FROM orders AS o
LEFT JOIN cte1 AS cte1
ON o.seller_id = cte1.seller_id
WHERE cte1.seller_id IS NOT NULL


/*
16. IDENTITY customers into returning or new
if the customer has done more than 5 return categorize them as returning otherwise new
Challenge: List customers id, name, total orders, total returns
*/


SELECT
	customer_name,
	total_orders,
	total_returned,
	CASE WHEN total_returned > 5 THEN 'Returning' ELSE 'New' END AS status
FROM(
SELECT 
	c.customer_id,
	CONCAT(LEFT(first_name, 1), '. ', last_name) AS customer_name,
	COUNT(o.order_id) AS total_orders,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) AS total_returned
FROM orders AS o
LEFT JOIN order_items AS oi
ON o.order_id = oi.order_id
LEFT JOIN customers AS c
ON c.customer_id = o.customer_id
GROUP BY 1,2
) AS t2

/*
17. Top 5 Customers by Orders in Each State
Identify the top 5 customers with the highest number of orders for each state.
Challenge: Include the number of orders and total sales for each customer.
*/

-- customers x orders x order_items
SELECT *
FROM(
SELECT
	c.customer_id,
	CONCAT(LEFT(first_name, 1), '. ', last_name) AS customer_name,
	state,
	COUNT(o.order_id) AS total_orders,
	SUM(oi.total_sales) AS total_sales,
	DENSE_RANK() OVER(PARTITION BY state ORDER BY COUNT(o.order_id) DESC) AS rank
FROM orders AS o
LEFT JOIN order_items AS oi
ON o.order_id = oi.order_id
LEFT JOIN customers AS c
ON c.customer_id = o.customer_id
GROUP BY 1,2,3
) AS t4
WHERE rank <= 5

/*
19. Revenue by Shipping Provider
Calculate the total revenue handled by each shipping provider.
Challenge: Include the total number of orders handled and the average delivery time for each provider.
*/

-- oi x o x shippings
-- group by shipping_id , total revenue
-- total_orders, average delivery_time

SELECT 
	s.shipping_providers,
	ROUND(SUM(total_sales)::numeric,2) AS total_sale,
	COUNT(o.order_id) AS total_orders,
	ROUND(AVG(s.shipping_date - o.order_date)::numeric,2)
FROM orders AS o
JOIN order_items AS oi
ON o.order_id = oi.order_id
JOIN shippings AS s
ON o.order_id = s.order_id
GROUP BY 1

/*
20. Top 10 product with highest decreasing revenue ratio compare to last year(2022) and current_year(2023)
Challenge: Return product_id, product_name, category_name, 2022 revenue and 2023 revenue decrease ratio 
at end Round the result
Note: Decrease ratio = cr-ls/ls* 100 (cs = current_year ls=last_year)
*/

WITH last_year AS (
SELECT 
	p.product_id,
	p.product_name,
	c.category_name,
	SUM(oi.total_sales) AS total_revenue
FROM orders AS o
JOIN order_items AS oi
ON o.order_id = oi.order_id
JOIN products AS p
ON oi.product_id = p.product_id
JOIN category AS c
ON p.category_id = c.category_id
WHERE EXTRACT(YEAR FROM o.order_date) = 2022
GROUP BY 1,2,3
),

current_year AS (
SELECT 
	p.product_id,
	p.product_name,
	c.category_name,
	SUM(oi.total_sales) AS total_revenue
FROM orders AS o
JOIN order_items AS oi
ON o.order_id = oi.order_id
JOIN products AS p
ON oi.product_id = p.product_id
JOIN category AS c
ON p.category_id = c.category_id
WHERE EXTRACT(YEAR FROM o.order_date) = 2023
GROUP BY 1,2,3
) 

SELECT 
	cy.product_id,
	cy.product_name,
	cy.category_name,
	ROUND(ly.total_revenue::numeric,2) AS last_year_revenue,
	ROUND(cy.total_revenue::numeric,2) AS current_year_revenue,
	ROUND((cy.total_revenue - ly.total_revenue)::numeric/ly.total_revenue::numeric * 100, 2) AS revenue_dec_ratio
FROM last_year AS ly
JOIN current_year AS cy
USING (product_id)
WHERE ly.total_revenue > cy.total_revenue
ORDER BY 5 DESC
LIMIT 10;

/*
Final Task
-- Store Procedure
create a function as soon as the product is sold the the same quantity should reduced from inventory table
after adding any sales records it should update the stock in the inventory table based on the product and qty purchased
-- 
